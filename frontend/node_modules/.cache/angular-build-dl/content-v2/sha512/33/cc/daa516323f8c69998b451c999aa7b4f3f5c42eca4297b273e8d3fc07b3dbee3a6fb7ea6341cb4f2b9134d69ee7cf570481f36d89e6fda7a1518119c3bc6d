{"version":3,"sources":["src/app/counter.service.ts","src/app/post.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { url } from './config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CounterService {\n \n  private postUrl =`http://localhost:3000/api`;\n  // private postUrl =`api`;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(private http: HttpClient) { }\n\n  createPost(postData: any): Observable<any> {\n    let url = this.postUrl + '/counter';\n    return this.http.post<any>(url, postData, this.httpOptions).pipe(\n      tap((newpost: any) => { }),\n      catchError(this.handleError<any>('errorpost'))\n    );\n  }\n\n  setgamesData(gamesData: any): Observable<any> {\n    let url = this.postUrl + '/post-games';\n    return this.http.post<any>(url, gamesData, this.httpOptions).pipe(\n      tap((newpost: any) => { }),\n      catchError(this.handleError<any>('errorpost'))\n    );\n  }\n\n  getgamesData(gamesData: any): Observable<any> {\n    let url = this.postUrl + '/get-games';\n    return this.http.post<any>(url, gamesData, this.httpOptions).pipe(\n      tap((newpost: any) => { }),\n      catchError(this.handleError<any>('errorpost'))\n    );\n  }\n\n  postgamesCountData(gamesData: any): Observable<any> {\n    let url = this.postUrl + '/post-games-count';\n    return this.http.post<any>(url, gamesData, this.httpOptions).pipe(\n      tap((newpost: any) => { }),\n      catchError(this.handleError<any>('errorpost'))\n    );\n  }\n\n\n  setCovidData(covidData: any): Observable<any> {\n    let url = this.postUrl + '/admin/post-covid';\n    return this.http.post<any>(url, covidData, this.httpOptions).pipe(\n      tap((newpost: any) => { }),\n      catchError(this.handleError<any>('errorpost'))\n    );\n  }\n\n  getCovidData(covidData: any): Observable<any> {\n    let url = this.postUrl + '/admin/get-covid';\n    return this.http.post<any>(url, covidData, this.httpOptions).pipe(\n      tap((newpost: any) => { }),\n      catchError(this.handleError<any>('errorpost'))\n    );\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.error(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { url } from './config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n\n  // private postUrl =`http://localhost:3000/api`;\n  private postUrl =`api`;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(private http: HttpClient) { }\n\n  createPost(postData: any): Observable<any> {\n    let url = this.postUrl + '/post/create-post';\n    console.log('url', url)\n    return this.http.post<any>(url, postData, this.httpOptions).pipe(\n      tap((newpost: any) => console.log(`new post`)),\n      catchError(this.handleError<any>('errorpost'))\n    );\n  }\n\n  getAllPost(): Observable<any[]> {\n    return this.http.get<any[]>(this.postUrl + '/post/get-all-post')\n      .pipe(\n        tap(_ => console.log('fetched post')),\n        catchError(this.handleError<any[]>('posts', []))\n      );\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.error(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}"],"sourceRoot":"webpack:///","file":"common-es5.js"}